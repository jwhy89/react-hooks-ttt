{"version":3,"sources":["components/Square.tsx","components/Board.tsx","components/Game.tsx","helpers.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["styles","background","border","fontSize","fontWeight","cursor","outline","Square","value","onClick","type","style","borderRadius","width","height","margin","display","gridTemplate","marginTop","Board","squares","map","square","i","Game","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXisNext","winner","lines","length","a","b","c","calculateWinner","timeInHistory","slice","current","_step","move","destination","step","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAGMA,EAAyB,CAC7BC,WAAY,YACZC,OAAQ,qBACRC,SAAU,OACVC,WAAY,SACZC,OAAQ,UACRC,QAAS,QASIC,EANA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,QAAV,OACb,wBAAQC,KAAK,SAASC,MAAOX,EAAQS,QAASA,EAA9C,SACGD,KCXCG,EAAQ,CACZT,OAAQ,qBACRU,aAAc,OACdC,MAAO,QACPC,OAAQ,QACRC,OAAQ,SACRC,QAAS,OACTC,aAAc,kCACdC,UAAW,QAWEC,EARD,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASX,EAAZ,EAAYA,QAAZ,OACZ,qBAAKE,MAAOA,EAAZ,SACGS,EAAQC,KAAI,SAACC,EAAQC,GAAT,OACX,cAAC,EAAD,CAAgBf,MAAOc,EAAQb,QAAS,kBAAMA,EAAQc,KAAzCA,SCXbvB,EAAS,CACba,MAAO,QACPE,OAAQ,aAgDKS,EA7CF,WAAO,IAAD,EACaC,mBAAS,CAACC,MAAM,GAAGC,KAAK,QADrC,mBACVC,EADU,KACDC,EADC,OAEmBJ,mBAAS,GAF5B,mBAEVK,EAFU,KAEEC,EAFF,OAGaN,oBAAS,GAHtB,mBAGVO,EAHU,KAGDC,EAHC,KAIXC,ECfD,SAAyBd,GAW9B,IAVA,IAAMe,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAZ,EAAI,EAAGA,EAAIY,EAAMC,OAAQb,IAAK,CAAC,IAAD,cACnBY,EAAMZ,GADa,GAC9Bc,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAInB,EAAQiB,IAAMjB,EAAQiB,KAAOjB,EAAQkB,IAAMlB,EAAQiB,KAAOjB,EAAQmB,GACpE,OAAOnB,EAAQiB,GAGnB,OAAO,KDFQG,CAAgBZ,EAAQE,IA8BvC,OACE,qCACE,cAAC,EAAD,CAAOV,QAASQ,EAAQE,GAAarB,QA9BrB,SAACc,GACnB,IAAMkB,EAAgBb,EAAQc,MAAM,EAAGZ,EAAa,GAC9Ca,EAAUF,EAAcX,GACxBV,EAAO,YAAOuB,GAEhBT,GAAUd,EAAQG,KAEtBH,EAAQG,GAAKS,EAAU,IAAM,IAC7BH,EAAW,GAAD,mBAAKY,GAAL,CAAoBrB,KAC9BW,EAAcU,EAAcL,QAC5BH,GAAYD,OAqBV,sBAAKrB,MAAOX,EAAZ,UACGkC,EAAM,kBAAcA,GAAd,uBAAyCF,EAAU,IAAM,KAbpEJ,EAAQP,KAAI,SAACuB,EAAOC,GAClB,IAAMC,EAAcD,EAAI,uBAAmBA,GAAS,cACpD,OACE,6BACE,wBAAQnC,KAAK,SAASD,QAAS,kBATrCsB,EADcgB,EAUoCF,QARlDZ,EAAWc,EAAO,IAAM,GAFX,IAACA,GAUR,SAAoDD,KAD7CD,aEjCFG,EAFH,kBAAM,cAAC,EAAD,KCUHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3612650d.chunk.js","sourcesContent":["import React from 'react';\nimport CSS from 'csstype';\n\nconst styles: CSS.Properties = {\n  background: 'lightblue',\n  border: '2px solid darkblue',\n  fontSize: '30px',\n  fontWeight: 'normal',\n  cursor: 'pointer',\n  outline: 'none',\n};\n\nconst Square = ({ value, onClick }) => (\n  <button type='button' style={styles} onClick={onClick}>\n    {value}\n  </button>\n);\n\nexport default Square;","import React from 'react';\nimport Square from './Square';\n\nconst style = {\n  border: '2px solid darkblue',\n  borderRadius: '10px',\n  width: '250px',\n  height: '250px',\n  margin: '0 auto',\n  display: 'grid',\n  gridTemplate: 'repeat(3, 1fr) / repeat(3, 1fr)',\n  marginTop: '50px',\n};\n\nconst Board = ({ squares, onClick }) => (\n  <div style={style}>\n    {squares.map((square, i) => (\n      <Square key={i} value={square} onClick={() => onClick(i)} />\n    ))}\n  </div>\n);\n\nexport default Board;\n","// Checkout ut original tutorial here: https://reactjs.org/tutorial/tutorial.html\n\nimport React, { useState } from 'react';\nimport { calculateWinner } from '../helpers';\nimport Board from './Board';\n\nconst styles = {\n  width: '200px',\n  margin: '20px auto',\n};\n\nconst Game = () => {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXisNext] = useState(true);\n  const winner = calculateWinner(history[stepNumber]);\n\n  const handleClick = (i: number) => {\n    const timeInHistory = history.slice(0, stepNumber + 1);\n    const current = timeInHistory[stepNumber];\n    const squares = [...current];\n    // If user click an occupied square or if game is won, return\n    if (winner || squares[i]) return;\n    // Put an X or an O in the clicked square\n    squares[i] = xIsNext ? 'X' : 'O';\n    setHistory([...timeInHistory, squares]);\n    setStepNumber(timeInHistory.length);\n    setXisNext(!xIsNext);\n  };\n\n  const jumpTo = (step) => {\n    setStepNumber(step);\n    setXisNext(step % 2 === 0);\n  };\n\n  const renderMoves = () =>\n    history.map((_step, move) => {\n      const destination = move ? `Got to move #${move}` : 'Go to start';\n      return (\n        <li key={move}>\n          <button type='button' onClick={() => jumpTo(move)}>{destination}</button>\n        </li>\n      );\n    });\n\n  return (\n    <>\n      <Board squares={history[stepNumber]} onClick={handleClick} />\n      <div style={styles}>\n        {winner ? `Winner: ${winner}` : `Next Player: ${xIsNext ? 'X' : 'O'}`}\n        {renderMoves()}\n      </div>\n    </>\n  );\n};\n\nexport default Game;\n","export function calculateWinner(squares: number[]) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n","import React from 'react';\nimport './App.css';\nimport Game from './components/Game';\n\nconst App = () => <Game />;\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}